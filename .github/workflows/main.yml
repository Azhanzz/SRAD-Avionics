name: Manage linked issues based on PR events

on:
  pull_request:
    types: [opened, reopened, review_requested]

  pull_request_review:
    types: [submitted]

jobs:
  update-linked-issues:
    runs-on: ubuntu-latest

    steps:
      - name: Debug - Print PR Node ID
        run: |
          echo "PR_ID=${{ github.event.pull_request.node_id }}"
          echo "PR_NUMBER=${{ github.event.pull_request.number }}"
          echo "PR_URL=${{ github.event.pull_request.html_url }}"

      # Step 1: Get all linked issues
      - name: Fetch Linked Issues
        env:
          GH_TOKEN: ${{ secrets.TEST }}
        run: |
          linked_issues=$(gh api graphql -f query='
            query($pr:ID!) {
              node(id: $pr) {
                ... on PullRequest {
                  closingIssuesReferences(first: 10) {
                    nodes {
                      id
                      number
                      projectItems(first: 5) {
                        nodes {
                          id
                        }
                      }
                    }
                  }
                }
              }
            }' -f pr=${{ github.event.pull_request.node_id }} --jq '.data.node.closingIssuesReferences.nodes')
          
          # Echo out the issues for debug
          echo "Linked issues: $linked_issues"

          # Extract issue IDs and save them to a new environment variable
          echo "$linked_issues" | jq -r '.[].projectItems.nodes[0].id' | while read -r issue_id; do
            echo "LINKED_ISSUE_ID=$issue_id" >> $GITHUB_ENV
          done

      # Step 2: Update each issue based on the PR event
      - name: Update status for each issue
        env:
          GH_TOKEN: ${{ secrets.TEST }}
          PROJECT_ID: PVT_kwHOCXMlSM4Ap8fI  # Your Project ID
          STATUS_FIELD_ID: PVTSSF_lAHOCXMlSM4Ap8fIzghRdVc  # Your Status Field ID
        run: |
          # Check the PR event type and set the corresponding status
          if [[ "${{ github.event.action }}" == "opened" ]] || [[ "${{ github.event.action }}" == "review_requested" ]]; then
            status_option_id="d73ac60e"  # ID for "Ready"
            echo "Setting status to 'Ready'"
          elif [[ "${{ github.event.pull_request_review.state }}" == "changes_requested" ]] || [[ "${{ github.event.action }}" == "reopened" ]]; then
            status_option_id="another-id-for-requires-changes"  # ID for "Requires Changes"
            echo "Setting status to 'Requires Changes'"
          else
            echo "No valid event type for status update."
            exit 1
          fi

          # Loop through each linked issue and update the status
          while IFS= read -r issue_id; do
            echo "Updating status for issue: $issue_id"
            gh api graphql -f query='
            mutation($issueId:ID!, $projectId:ID!) {
              updateProjectV2ItemFieldValue(input: {projectId: $projectId, fieldId: "${{env.STATUS_FIELD_ID}}", itemId: $issueId, value: {singleSelectOptionId: "'$status_option_id'"}}) {
                projectV2Item {
                  type
                  updatedAt
                }
              }
            }' -f issueId=$issue_id -f projectId=$PROJECT_ID
          done < <(echo "$LINKED_ISSUE_ID")
